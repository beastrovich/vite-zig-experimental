const GlobalContext = @import("./GlobalContext.zig");
const App = @import("./App.zig");
const Env = @import("./Env.zig");

var foo: u32 = 1;

pub export fn __wasm_mainStart() void {
    Env.log("zig: __wasm_mainStart");
    GlobalContext.initialize();

    App.main();
}

/// Initializes the TLS data segment starting at `memory`.
/// This is a synthetic function, generated by the linker.
extern fn __wasm_init_tls(memory: [*]u8) void;

/// Returns a pointer to the base of the TLS data segment for the current thread
inline fn __tls_base() [*]u8 {
    return asm (
        \\ .globaltype __tls_base, i32
        \\ global.get __tls_base
        \\ local.set %[ret]
        : [ret] "=r" (-> [*]u8),
    );
}

/// Returns the size of the TLS segment
inline fn __tls_size() u32 {
    return asm volatile (
        \\ .globaltype __tls_size, i32, immutable
        \\ global.get __tls_size
        \\ local.set %[ret]
        : [ret] "=r" (-> u32),
    );
}

/// Returns the alignment of the TLS segment
inline fn __tls_align() u32 {
    return asm (
        \\ .globaltype __tls_align, i32, immutable
        \\ global.get __tls_align
        \\ local.set %[ret]
        : [ret] "=r" (-> u32),
    );
}

/// Allows for setting the stack pointer in the WebAssembly module.
inline fn __set_stack_pointer(addr: [*]u8) void {
    asm volatile (
        \\ local.get %[ptr]
        \\ global.set __stack_pointer
        :
        : [ptr] "r" (addr),
    );
}

/// Returns the current value of the stack pointer
inline fn __get_stack_pointer() [*]u8 {
    return asm (
        \\ global.get __stack_pointer
        \\ local.set %[stack_ptr]
        : [stack_ptr] "=r" (-> [*]u8),
    );
}

pub export fn __wasm_workerStart(global_context_ptr: *GlobalContext, function: *const anyopaque, data_ptr: ?*anyopaque, idx: u32) void {
    // const stackPtr: [*]u8 = ;
    // Env.logFmtSmall(100, "zig: __wasm_workerStart stackPtr: 0x{x}", .{@intFromPtr(stackPtr)});

    __set_stack_pointer(@ptrFromInt(0x10000 + 0xFFFF * idx));

    Env.log("zig: __wasm_workerStart");
    GlobalContext.setCurrent(global_context_ptr);

    // _ = global_context_ptr; // autofix
    const fnPtr: *const fn (?*anyopaque) void = @ptrCast(function);
    // // log foo
    // Env.logFmtSmall(100, "foo: {d}", .{foo});

    fnPtr(data_ptr);
}
